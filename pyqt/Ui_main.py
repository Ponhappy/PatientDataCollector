# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'd:\BLTM\graduation project\PatientDataCollector-master\pyqt\main.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from ultralytics import YOLO
import cv2
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QMainWindow, QFileDialog, QPushButton,QComboBox, QLabel
import sys
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QWidget
# from finger_detect import save_finger_pulse
# from wrist_detect import save_wrist_pulse
import os
import threading
from wave import wrist_PlotWidget
import serial 
import serial.tools.list_ports

class Ui_MainWindow(QWidget):
    def setupUi(self, MainWindow):
        self.isCapture = False
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1600, 1200)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(20, 40, 1400, 900))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        
        # 添加开始检测按钮
        self.start_b = QtWidgets.QPushButton(self.verticalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.start_b.sizePolicy().hasHeightForWidth())
        self.start_b.setSizePolicy(sizePolicy)
        self.start_b.setObjectName("start_b")
        self.horizontalLayout_4.addWidget(self.start_b)
        self.start_b.clicked.connect(self.start_all_sensor)

        # 添加视频窗口标签
        self.video_l = QtWidgets.QLabel(self.verticalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.video_l.sizePolicy().hasHeightForWidth())
        self.video_l.setSizePolicy(sizePolicy)
        self.video_l.setObjectName("video_l")
        self.horizontalLayout_4.addWidget(self.video_l)
        
        # 添加截图按钮
        self.cut_b = QtWidgets.QPushButton(self.verticalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.cut_b.sizePolicy().hasHeightForWidth())
        self.cut_b.setSizePolicy(sizePolicy)
        self.cut_b.setObjectName("cut_b")
        self.horizontalLayout_4.addWidget(self.cut_b)
        self.cut_b.clicked.connect(self.capture)

        # 添加舌像窗口标签
        self.screenshot_l = QtWidgets.QLabel(self.verticalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.screenshot_l.sizePolicy().hasHeightForWidth())
        self.screenshot_l.setSizePolicy(sizePolicy)
        self.screenshot_l.setObjectName("screenshot_l")
        self.horizontalLayout_4.addWidget(self.screenshot_l)

        # 添加面像窗口标签
        self.face_l = QtWidgets.QLabel(self.verticalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.face_l.sizePolicy().hasHeightForWidth())
        self.face_l.setSizePolicy(sizePolicy)
        self.face_l.setObjectName("face_l")
        self.horizontalLayout_4.addWidget(self.face_l)

        # 添加串口选择相关控件
        self.serial_label = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.serial_label.setText("选择串口:")
        self.horizontalLayout_4.addWidget(self.serial_label)

        self.serial_combo = QComboBox(self.verticalLayoutWidget)
        self.horizontalLayout_4.addWidget(self.serial_combo)

        self.confirm_serial_b = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.confirm_serial_b.setText("确认串口")
        self.horizontalLayout_4.addWidget(self.confirm_serial_b)
        self.confirm_serial_b.clicked.connect(self.confirm_serial_selection)
        
        self.verticalLayout.addLayout(self.horizontalLayout_4)

        # 创建 wrist_PlotWidget 实例
        self.plot_widget = wrist_PlotWidget()  # 不传递端口，稍后通过确认按钮设置
        self.verticalLayout.addWidget(self.plot_widget)

        # 添加诊断文本浏览器
        self.diagnosis_tb = QtWidgets.QTextBrowser(self.verticalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Ignored)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.diagnosis_tb.sizePolicy().hasHeightForWidth())
        self.diagnosis_tb.setSizePolicy(sizePolicy)
        self.diagnosis_tb.setObjectName("diagnosis_tb")
        self.verticalLayout.addWidget(self.diagnosis_tb)
        
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        
        # 填充串口选择框
        self.populate_serial_ports()

        #
        self.patient_id = -1  # 最新病人的id
        self.patient_list_dp = os.path.dirname(__file__) + '/user_packages'  # 存储病人信息的文件夹,在当前文件夹创建一个user_packages就行
        self.diag = ''
        self.index = 0
        self.timer = None


        # self.wave_l = QtWidgets.QLabel(self.verticalLayoutWidget)
        # self.wave_l.setObjectName("wave_l")
        # self.verticalLayout.addWidget(self.wave_l)


        #
        self.patient_id=-1#最新病人的id
        self.patient_list_dp=os.path.dirname(__file__)+'/user_packages'#存储病人信息的文件夹,在当前文件夹创建一个user_packages就行
        self.diag=''
        self.index = 0
        self.timer = None

        


    def populate_serial_ports(self):
        ports = serial.tools.list_ports.comports()
        self.serial_combo.clear()
        for port in ports:
            self.serial_combo.addItem(port.device)
        if ports:
            self.serial_combo.setCurrentIndex(0)
        else:
            self.serial_combo.addItem("没有可用的串口")
            
    def confirm_serial_selection(self):
        selected_port = self.serial_combo.currentText()
        if selected_port == "没有可用的串口":
            print("没有可用的串口，无法启动传感器。")
            return
        print(f"选择的串口: {selected_port}")
        # 设置串口到 wrist_PlotWidget
        self.plot_widget.set_serial_port(selected_port, 115200)
        if self.plot_widget.ser:
            print("串口初始化成功。")
        else:
            print("串口初始化失败。")   
            
                     
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.start_b.setText(_translate("MainWindow", "开始检测"))
        self.video_l.setText(_translate("MainWindow", "视频窗口"))
        self.cut_b.setText(_translate("MainWindow", "截图"))
        self.screenshot_l.setText(_translate("MainWindow", "舌像窗口"))
        self.face_l.setText(_translate("MainWindow", "面像窗口"))
        # self.wave_l.setText(_translate("MainWindow", "波形图准备"))



    #对应开始检测的按钮
    def start_all_sensor(self):
        self.patient_id=find_max_number_in_folders(self.patient_list_dp)+1#新建一个大一号的文件夹
        os.makedirs(self.patient_list_dp+'/'+str(self.patient_id))
        self.open_camera()
        
        # threads = []

        # # 为每个函数创建一个线程
        # t1 = threading.Thread(target=self.start_finger)
        # threads.append(t1)
        # t2 = threading.Thread(target=self.start_wrist)
        # threads.append(t2)
        # t3 = threading.Thread(target=self.open_camera)
        # threads.append(t3)
        # # 启动所有线程
        # for t in threads:
        #     t.start()

        # # 可以选择等待所有线程执行完毕，这里使用join方法
        # for t in threads:
        #     t.join()
        # self.start_finger()
        # self.start_wrist()
        # self.open_camera()

    def open_camera(self):
        print("打开摄像头")
        cap = cv2.VideoCapture(0)
        while cap.isOpened():
            ret, frame = cap.read()
            if not ret:
                break
            if self.isCapture:  # 检查是否已经截图
                # frame="D:\BLTM\graduation project\PatientDataCollector-master\pyqt\\tongue\images\\test\\644.jpg"
                self.update(frame) 
                cap.release()  # 释放摄像头资源
                cv2.destroyAllWindows()  # 关闭 cv2 窗口
                # self.update(self.video_l.pixmap().toImage())  # 调用 func1 处理保存的图像
                break
            #一直在更新视频框里的图片
            img = QtGui.QImage(frame.data, frame.shape[1], frame.shape[0], QtGui.QImage.Format_BGR888)
            pixmap = QtGui.QPixmap.fromImage(img)
            scaled_pixmap = pixmap.scaled(self.video_l.size(), QtCore.Qt.KeepAspectRatio)
            self.video_l.setPixmap(scaled_pixmap)
            # self.video_l.setPixmap(QtGui.QPixmap.fromImage(img))
            # self.video_l.setScaledContents(True)
            cv2.waitKey(0)


    #对应截图的按钮
    def capture(self):
        img_fp=self.patient_list_dp+"/"+str(self.patient_id)+"/tongue.jpg"
        self.video_l.pixmap().save(img_fp)
        print("保存完毕")
        self.isCapture = True  # 设置标志为已截图

    def update(self, frame):
        # 在这里对图像进行处理，例如打印图像的尺寸
        annotated_frame,diagnosis=tongue_diagnosis(frame)
        #改图片标签
        img = QtGui.QImage(annotated_frame.data, annotated_frame.shape[1], annotated_frame.shape[0], QtGui.QImage.Format_BGR888)
        pixmap = QtGui.QPixmap.fromImage(img)
        scaled_pixmap = pixmap.scaled(self.screenshot_l.size(), QtCore.Qt.KeepAspectRatio)
        self.screenshot_l.setPixmap(scaled_pixmap)
        #更改诊断
        self.show_diagnosis(diagnosis)




    def start_finger(self):
        print("指夹")
        finger_pulse_fp=self.patient_list_dp+"/"+str(self.patient_id)+"/finger_pulse.xlsx"
        # save_finger_pulse(finger_pulse_fp)
        


    def start_wrist(self):
        print("手腕")
        wrist_pulse_fp=self.patient_list_dp+"/"+str(self.patient_id)+"/wrist_pulse.xlsx"
        # save_wrist_pulse(wrist_pulse_fp)

    def show_diagnosis(self,diag):
        self.diag=diag
        # self.button.setEnabled(False)  # 禁用按钮
        self.index = 0
        self.diagnosis_tb.clear()  # 清空文本浏览器
        self.timer = self.startTimer(100)  # 每 100 毫秒触发一次定时器事件

    def timerEvent(self, event):
        if self.index < len(self.diag):
            self.diagnosis_tb.insertPlainText(self.diag[self.index])  # 插入一个字符
            self.index += 1
        else:
            self.killTimer(self.timer)  # 文本显示完毕，停止定时器
            # self.button.setEnabled(True)  # 启用按钮




def tongue_diagnosis(img):
    class_labels = {
    0: "您的舌质呈现粉红色，这通常与健康的舌象相符，表明您的身体状况良好，气血充足。粉红舌通常反映出良好的生理状态，然而，如果舌质偏红，则可能提示体内存在热症，需警惕潜在的炎症或感染情况。建议定期关注身体其他症状，保持健康的生活方式。",
    
    1: "您的舌苔薄白，通常表明体内没有明显的病理变化，可能处于健康状态。然而，薄白舌也可能提示气血不足或体内寒气较重，建议注意饮食调理，适当增加营养摄入，保持身体温暖，避免寒凉食物的过量摄入。",
    
    2: "您的舌苔厚白，这可能指示体内存在寒湿或痰湿，通常与消化系统功能障碍有关。厚白舌常见于脾胃虚弱、消化不良等情况，建议您关注饮食习惯，避免油腻和生冷食物，同时可以考虑适当的中药调理，以增强脾胃功能。",
    
    3: "您的舌苔厚黄，这通常表示体内有湿热，可能伴随发热、口渴、便秘等症状。厚黄舌常见于感染、炎症或消化系统疾病。建议您保持充足的水分摄入，避免辛辣刺激食物，同时可以考虑咨询专业医生进行进一步检查和调理。",
    
    4: "您的舌苔灰黑，这是一种较为严重的病理变化，可能与严重的感染、长期疾病、药物中毒或内脏器官的严重病变有关。灰黑舌通常提示体内存在较大的病理变化，建议您尽快就医，进行详细检查，以便及时发现并处理潜在的健康问题。"
    }

    model = YOLO('./runs/detect/train/weights/best.pt')  # 加载模型
    results = model(img)
    annotated_frame = results[0].plot()
    # annotated_frame = cv2.cvtColor(annotated_frame, cv2.COLOR_BGR2RGB)
    # height, width, channel = annotated_frame.shape
    # bytes_per_line = 3 * width
    # qimage = QtGui.QImage(annotated_frame.data, width, height, bytes_per_line, QtGui.QImage.Format_RGB888)
    # pixmap = QtGui.QPixmap.fromImage(qimage)
    diagnosis="没有发现舌像，请重新拍照"
    for result in results:
        class_ids = result.boxes.cls.numpy()  # 获取类别索引数组
        for class_id in class_ids:
            # class_name = model.names[int(class_id)]
            diagnosis = class_labels.get(class_id, "未知类别")
            # report = f"\n{diagnosis}"
    
    print(diagnosis)
    return annotated_frame,diagnosis




def find_max_number_in_folders(folder_path):
    max_number = 0  # 初始化最大数字为 0
    # found = False  # 用于标记是否找到数字
    for item in os.listdir(folder_path):
        item_path = os.path.join(folder_path, item)
        if os.path.isdir(item_path):
            try:
                number = int(item)
                if number > max_number:  # 当未找到数字或找到更大数字时更新
                    max_number = number
                    # found = True
            except ValueError:
                pass  # 文件夹名称不是数字，忽略
    print(max_number)
    return max_number





if __name__=="__main__":

    app = QApplication(sys.argv)
    MainWindow1 = QMainWindow()     
    ui = Ui_MainWindow()             
    ui.setupUi(MainWindow1)
    MainWindow1.show()
    sys.exit(app.exec_())